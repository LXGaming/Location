plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "java"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "location-bungee"
version = version

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    build.dependsOn("signJar")
    compileJava.dependsOn(":common:build")
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
    jcenter()
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    shadow(project(path: ":common", configuration: "shadow"))
    provided(fileTree(dir: "libs", include: ["*.jar"]))
    provided("net.md-5:bungeecord-api:${bungeecordVersion}")
    shadow("net.kyori:text-api:${textVersion}")
    shadow("net.kyori:text-serializer-gson:${textVersion}") {
        exclude(module: "gson")
    }
    shadow("net.kyori:text-serializer-legacy:${textVersion}")
    shadow("net.kyori:text-adapter-bungeecord:3.0.4-SNAPSHOT") {
        transitive = false
    }
    shadow("org.checkerframework:checker-qual:${checkerqualVersion}")
    provided("org.slf4j:slf4j-api:${slf4jVersion}")
}

jar {
    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

processResources {
    from (sourceSets.main.resources.srcDirs) {
        include("bungee.yml")
        expand("name": "Location", "version": version)
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    relocate("net.kyori.text", "io.github.lxgaming.location.lib.text")
    relocate("org.checkerframework", "io.github.lxgaming.location.lib.checkerframework")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}