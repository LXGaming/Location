plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "java"
    id "maven-publish"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "location-api"
version = version

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    build.dependsOn("uploadArchives")
}

repositories {
    jcenter()
}

dependencies {
    provided("io.netty:netty-all:4.1.36.Final")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = System.getProperty("bintray.user")
    key = System.getProperty("bintray.key")
    publications = ["mavenPublication"]
    pkg {
        repo = "maven"
        name = project.archivesBaseName
        licenses = ["Apache-2.0"]
        vcsUrl = "https://github.com/LXGaming/Location.git"
        publish = true
        version {
            name = project.version + "." + System.getProperty("build.number")
            released = new Date()
        }
    }
}

bintrayUpload {
    dependsOn clean
    dependsOn build
    build.mustRunAfter clean

    onlyIf { System.getProperty("bintray.user") != null }
    onlyIf { System.getProperty("bintray.key") != null }
    onlyIf { System.getProperty("build.number") != null }
}

jar {
    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

javadoc {
    failOnError = false
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}